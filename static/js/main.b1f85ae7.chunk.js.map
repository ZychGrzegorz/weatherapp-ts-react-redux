{"version":3,"sources":["store/actions/alertActions.ts","store/actions.ts","store/actions/weatherActions.ts","components/Search.tsx","components/Weather.tsx","components/Alert.tsx","App.tsx","store/reducers/weatherReducer.ts","store/reducers/alertReducer.ts","store/store.ts","index.tsx"],"names":["setAlert","message","type","payload","setLoading","Search","title","dispatch","useDispatch","useState","city","setCity","className","onSubmit","e","preventDefault","trim","a","fetch","process","res","ok","json","resData","Error","console","log","getWeather","name","id","placeholder","value","onChange","currentTarget","Weather","data","fahrenheit","main","temp","toFixed","celsius","sys","country","weather","description","src","icon","alt","humidity","pressure","wind","speed","Alert","onClose","onClick","App","weatherData","useSelector","state","loading","error","alertMsg","alert","initialState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1f85ae7.chunk.js","sourcesContent":["import { SET_ALERT } from \"../actions\"\r\n\r\nexport const setAlert = (message:string): AlertAction=>{\r\n    return {   type: SET_ALERT, payload: message    }\r\n}","export const GET_WEATHER='GET_WEATHER'\r\nexport const SET_LOADING='SET_LOADING'\r\nexport const SET_ERROR='SET_ERROR'\r\nexport const SET_ALERT='SET_ALERT'","import {ThunkAction} from 'redux-thunk'\r\nimport {RootState} from '../store'\r\nimport { GET_WEATHER, SET_ERROR, SET_LOADING } from '../actions'\r\n\r\nexport const getWeather = (city: string): ThunkAction<void, RootState,null,WeatherAction>=>{\r\n  //zwracana wartosc, state,extra argumenty np. dla kolejnych wewnetrznych funkcji, akcja bazowa (non-thunk)\r\n    return async dispatch => {\r\n        try {\r\n            const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_API_KEY}`)\r\n            if (!res.ok){\r\n                const resData:WeatherError=await res.json()\r\n                throw new Error(resData.message)\r\n            }\r\n            const resData:WeatherData=await res.json()\r\n            console.log(resData)\r\n            dispatch({type: GET_WEATHER, payload: resData})\r\n           \r\n        }\r\n        catch (err){\r\n            dispatch({\r\n                type: SET_ERROR,\r\n                payload:err.message\r\n            })\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport const setLoading = (): WeatherAction=>{\r\n    return {   type: SET_LOADING, payload:''    }\r\n}\r\n\r\nexport const setError = (): WeatherAction=>{\r\n    return {   type: SET_ERROR, payload: ''    }\r\n}","import React, { FormEvent, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setAlert } from \"../store/actions/alertActions\";\r\nimport { getWeather, setLoading } from \"../store/actions/weatherActions\";\r\ntype SearchProps = {\r\n  title: string;\r\n};\r\n\r\nconst Search: React.FC<SearchProps> = ({ title }) => {\r\n  const dispatch = useDispatch();\r\n  const [city, setCity] = useState(\"\");\r\n\r\n  const changeHandler = (e: FormEvent<HTMLInputElement>) => {\r\n    setCity(e.currentTarget.value);\r\n  };\r\n  const submitHandler = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (city.trim() === \"\") {\r\n      return dispatch(setAlert(\"City is required\"));\r\n    }\r\n    dispatch(setLoading);\r\n    dispatch(getWeather(city));\r\n    setCity(\"\");\r\n  };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h1 className=\"title\">{title}</h1>\r\n        <form onSubmit={submitHandler}>\r\n          <input\r\n            type=\"text\"\r\n            name=\"\"\r\n            className=\"inpiut\"\r\n            id=\"\"\r\n            placeholder=\"enter city name\"\r\n            value={city}\r\n            onChange={changeHandler}\r\n          />\r\n          <button className=\"button\">Search</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\ntype WeatherProps = {\r\n  data: WeatherData;\r\n};\r\nconst Weather: React.FC<WeatherProps> = ({ data }) => {\r\n  const fahrenheit = (data.main.temp * 1.8 - 459.67).toFixed(2);\r\n  const celsius = (data.main.temp - 273.15).toFixed(2);\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"title\">\r\n        {data.name} - {data.sys.country}\r\n        <div className=\"level\">\r\n          <p className=\"heading\">{data.weather[0].description}</p>\r\n          <p className=\"title\">\r\n            <img\r\n              src={`http://openweathermap.org/img/wn/${data.weather[0].icon}.png`}\r\n              alt=\"weather icon\"\r\n            />\r\n          </p>\r\n        </div>\r\n        <div className=\"tempContainer\">\r\n          <p className=\"heading\">temp</p>\r\n          <div className=\"title\">\r\n            <p>{data.main.temp} K</p>\r\n            <p>\r\n              {fahrenheit} <sup>&#8457;</sup>\r\n            </p>\r\n            <p>\r\n              {celsius} <sup>&#8451;</sup>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"humidityContainer\">\r\n          <p className=\"heading\">humidity</p>\r\n          <p className=\"title\">{data.main.humidity}</p>\r\n        </div>\r\n        <div className=\"pressureContainer\">\r\n          <p className=\"heading\">pressure</p>\r\n          <p className=\"title\">{data.main.pressure}</p>\r\n        </div>\r\n        <div className=\"windContainer\">\r\n          <p className=\"heading\">wind</p>\r\n          <p className=\"title\">{data.wind.speed} m/s</p>\r\n        </div>\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\ntype AlertProps = {\r\n  message: string;\r\n  onClose: () => void;\r\n};\r\nconst Alert: React.FC<AlertProps> = ({ message, onClose }) => {\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modalBackground\" onClick={onClose}></div>\r\n      <div className=\"modalCard\">\r\n        <header className=\"modalCardHeader\">\r\n          <p className=\"modalCardTitle\">{message}</p>\r\n        </header>\r\n        <footer className=\"modalCardFooter\"></footer>\r\n        <button className=\"button\" onClick={onClose}>\r\n          Close\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"./store/store\";\nimport Search from \"./components/Search\";\nimport Weather from \"./components/Weather\";\nimport Alert from \"./components/Alert\";\nimport { setAlert } from \"./store/actions/alertActions\";\nimport { setError } from \"./store/actions/weatherActions\";\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const weatherData = useSelector((state: RootState) => state.weather.data);\n  const loading = useSelector((state: RootState) => state.weather.loading);\n  const error = useSelector((state: RootState) => state.weather.error);\n  const alertMsg = useSelector((state: RootState) => state.alert.message);\n\n  return (\n    <div className=\"appContainer\">\n      <Search title=\"Enter city name and press search button\" />\n      {loading ? (\n        <h2 className=\"h2\">Loading...</h2>\n      ) : (\n        weatherData && <Weather data={weatherData} />\n      )}\n      {alertMsg && (\n        <Alert message={alertMsg} onClose={() => dispatch(setAlert(\"\"))} />\n      )}\n      {error && (\n        <Alert\n          message={error}\n          onClose={() => {\n            dispatch(setError());\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { GET_WEATHER, SET_ERROR, SET_LOADING } from \"../actions\";\r\n\r\n\r\nconst initialState: WeatherState = {\r\n    data: null,\r\n    loading: false,\r\n    error: ''\r\n\r\n}\r\n\r\nexport default  (\r\n    state: WeatherState = initialState,\r\n    action: WeatherAction\r\n  ):WeatherState => {\r\n    switch (action.type) {\r\n              case GET_WEATHER:\r\n                return{\r\n                  data: action.payload,\r\n                  loading: false,\r\n                  error: ''\r\n                }\r\n              case SET_LOADING:\r\n                return{\r\n                  ...state,\r\n                  loading: false,\r\n                   }\r\n              case SET_ERROR:\r\n                return{\r\n                  ...state,\r\n                  error: action.payload,\r\n                  loading: false,\r\n                  }\r\n      default:\r\n        return state;\r\n    }\r\n  };","import { SET_ALERT } from \"../actions\"\r\n\r\nconst initialState: AlertState={\r\n    message: ''\r\n}\r\n\r\nexport default (state=initialState, action: AlertAction):AlertState => {\r\n    switch (action.type){\r\n    case SET_ALERT:\r\n        return {\r\n            message: action.payload\r\n        }\r\n    default:\r\n        return state}}\r\n    ","import {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport weatherReducer from './reducers/weatherReducer'\r\nimport alertReducer from './reducers/alertReducer'\r\n\r\nconst rootReducer = combineReducers({weather: weatherReducer, alert: alertReducer})\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nexport default store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}